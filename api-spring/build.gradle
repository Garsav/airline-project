plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.4'
}

group = 'com.garrett'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly   'org.postgresql:postgresql:42.7.4'

    // OpenAPI/Swagger UI (already using it)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.test {
    useJUnitPlatform()
}

/**
 * -------- JIB (containerize without Docker) ----------
 * Uses env vars when present, otherwise uses safe defaults.
 */
def toImage = System.getenv('JIB_TO_IMAGE')       // e.g. docker.io/garsav/airline-api:<tag> (set by Jenkins)
def hubUser = System.getenv('DOCKERHUB_USER')     // from Jenkins creds
def hubPswd = System.getenv('DOCKERHUB_PSW')      // from Jenkins creds

jib {
    from {
        image = 'eclipse-temurin:17-jre'
    }
    to {
        // FALLBACK so we never pass null into Jib
        image = (toImage != null && !toImage.trim().isEmpty())
                ? toImage
                : 'docker.io/garsav/airline-api:latest'

        // Only set auth if both values exist (avoids null provider errors)
        if (hubUser != null && hubPswd != null) {
            auth {
                username = hubUser
                password = hubPswd
            }
        }
    }
    container {
        ports = ['8080']
        // optional: jvmFlags = ['-Xms256m','-Xmx512m']
    }
}
